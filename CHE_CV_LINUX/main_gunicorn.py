from flask import Flask, request, jsonify
from concurrent.futures import ThreadPoolExecutor
import os, urllib.request, time
from processor.file_router_new import handle_file_by_url
import traceback
import multiprocessing

# Kh·ªüi t·∫°o Flask app
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'PaddleOCR/static/'

# T·∫°o executor v·ªõi s·ªë lu·ªìng b·∫±ng s·ªë core - 1 (gi·ªØ l·∫°i 1 core cho h·ªá th·ªëng)
max_workers = 3
print(f"S·ªë core s·ª≠ d·ª•ng: {max_workers}")
executor = ThreadPoolExecutor(max_workers=max_workers)

def process_single_cv(item):
    file_id = item.get("id")
    url = item.get("link")
    try:
        start_time = time.time()
        print(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file {file_id}")
        output_link = handle_file_by_url(file_id, url, app.config['UPLOAD_FOLDER'])
        output_link = output_link.replace('PaddleOCR/', '')  # chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n
        end_time = time.time()
        print(f"‚úÖ X·ª≠ l√Ω xong file {file_id} trong {end_time - start_time:.2f} gi√¢y")
        return {
            "id": file_id,
            "link": output_link,
            "link_error": 0
        }
    except Exception as e:
        traceback.print_exc()
        return {
            "id": file_id,
            "link": "",
            "link_error": 1
        }

@app.route('/hide_cv', methods=['POST'])
def hide_cv():
    print("üì• API /hide_cv ƒë√£ ƒë∆∞·ª£c g·ªçi")
    data = request.json
    print(f"‚û°Ô∏è T·ªïng s·ªë file c·∫ßn x·ª≠ l√Ω: {len(data)}")

    results = list(executor.map(process_single_cv, data))

    return jsonify(results)

# ‚ö†Ô∏è KH√îNG c·∫ßn ƒëo·∫°n n√†y khi ch·∫°y b·∫±ng gunicorn
# if __name__ == '__main__':
#     app.run(host='0.0.0.0', port=8000, debug=False)
